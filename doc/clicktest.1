.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLICKTEST 1"
.TH CLICKTEST 1 "2020-10-22" "perl v5.22.1" ""
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
clicktest \- simple test harness
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
clicktest [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ClickTest is a simple test harness. A clicktest test comprises a shell
script and, optionally, input and expected output files for that
script. ClickTest runs the script; the test succeeds if all of the script
commands succeed, and the actual output files match expectations.
.PP
ClickTest accepts test filenames and directories as arguments.
Directories are recursively searched for \fI*.clicktest\fR files. It
reports problems for failed tests, plus a summary.
.PP
ClickTest exits with status 0 if all tests succeed, 1 if any test fails,
and 2 if a test fails due to an internal error. Tests whose \fB\f(CB%require\fB\fR
prerequisites fail do not affect the exit status, except that if all
tests' prerequisites fail, the return status is 1 instead of 0.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-j\fR\fIN\fR, \fB\-\-jobs\fR=\fIN\fR" 8
.IX Item "-jN, --jobs=N"
Run up to \fIN\fR tests simultaneously. Like Make's \fB\-j\fR option.
.IP "\fI\s-1VARIABLE\s0\fR=\fI\s-1VALUE\s0\fR" 8
.IX Item "VARIABLE=VALUE"
Provide an environment variable setting for \fI\s-1VARIABLE\s0\fR within the script.
.IP "\fB\-s\fR, \fB\-\-show\fR \fI\s-1FILE\s0\fR" 8
.IX Item "-s, --show FILE"
Echo the contents of \fI\s-1FILE\s0\fR on completion. \fI\s-1FILE\s0\fR should be one of the
filenames specified by \fB\f(CB%file\fB\fR or \fB\f(CB%expect\fB\fR, or \fBstdout\fR or \fBstderr\fR.
Leaves out any ignored lines.
.IP "\fB\-S\fR, \fB\-\-show\-raw\fR \fI\s-1FILE\s0\fR" 8
.IX Item "-S, --show-raw FILE"
Like \fB\-\-show\fR, but includes any ignored lines.
.IP "\fB\-\-show\-all\fR" 8
.IX Item "--show-all"
Calls \fB\-\-show\fR for all filenames specified by any \fB\f(CB%expect\fB\fR, plus \fBstdout\fR
and \fBstderr\fR. Leaves out any ignored lines.
.IP "\fB\-\-show\-all\-raw\fR" 8
.IX Item "--show-all-raw"
Like \fB\-\-show\-all\fR, but includes any ignored lines.
.IP "\fB\-e\fR, \fB\-\-expand\fR" 8
.IX Item "-e, --expand"
Don't run the given test; instead, expand its files into the current
directory. The script is stored in a file called \fI\f(CI%script\fI\fR.
.IP "\fB\-\-preserve\-temporaries\fR" 8
.IX Item "--preserve-temporaries"
Preserve temporary test directories. ClickTest runs each test in its own
subdirectory of the current directory. Test directories are named
\&\fIclicktestNNNNN\fR, and are typically removed on test completion.
Examining the contents of a test directory can be useful when
debugging a test.
.IP "\fB\-p\fR, \fB\-\-path\fR \fI\s-1DIR\s0\fR" 8
.IX Item "-p, --path DIR"
Prepend \fI\s-1DIR\s0\fR to the \f(CW\*(C`PATH\*(C'\fR environment variable before running the
test script.
.IP "\fB\-V\fR, \fB\-\-verbose\fR" 8
.IX Item "-V, --verbose"
Print information to standard error about successful tests as well as
unsuccessful tests.
.IP "\fB\-VV\fR, \fB\-\-superverbose\fR" 8
.IX Item "-VV, --superverbose"
Like \fB\-\-verbose\fR, but use a slightly different format, and
additionally print every test's \fB\f(CB%info\fB\fR section before the test results.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 8
.IX Item "-q, --quiet"
Don't print information to the terminal while running multiple tests.
.IP "\fB\-v\fR, \fB\-\-version\fR" 8
.IX Item "-v, --version"
Print version number information and exit.
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
Print help information and exit.
.SH "FILE FORMAT"
.IX Header "FILE FORMAT"
ClickTest test files consist of several sections, each introduced by a line
starting with \fB%\fR. There must be, at least, a \fB\f(CB%script\fB\fR section.
The \fB\f(CB%file\fB\fR and \fB\f(CB%expect\fB\fR sections define input and output files by
name.
.ie n .IP "\fB\fB%script\fB\fR" 8
.el .IP "\fB\f(CB%script\fB\fR" 8
.IX Item "%script"
The \fBsh\fR shell script that controls the test. ClickTest will run each
command in sequence. Every command in the script must succeed, with
exit status 0, or the test will fail. Use \fB\f(CB%file\fB\fR sections to define
script input files and \fB\f(CB%expect\fB\fR sections to check script output files
for expected values.
.Sp
The \fB\f(CB%script\fB\fR section can contain subtests. To start a new subtest,
execute a command like \f(CW\*(C`clicktest_subtest\ SECTIONNAME\*(C'\fR. ClickTest will
report the problematic \f(CW\*(C`SECTIONNAME\*(C'\fR when standard output or error
doesn't match an expected value.
.Sp
The script's environment is populated with any \fI\s-1VARIABLE\s0\fRs set on the
clicktest command line with \fB\f(BI\s-1VARIABLE\s0\fB=\f(BI\s-1VALUE\s0\fB\fR syntax. Also, the
\&\fB\f(CB$rundir\fB\fR environment variable is set to the directory in which
clicktest was originally run.
.ie n .IP "\fB\fB%require\fB [\-q]\fR" 8
.el .IP "\fB\f(CB%require\fB [\-q]\fR" 8
.IX Item "%require [-q]"
An \fBsh\fR shell script defining prerequisites that must be satisfied
before the test can run. Every command in the script must succeed, with
exit status 0, for the test to run. Standard output and error are not
checked, however. The \fB\-q\fR flag tells clicktest not to print an error message
if a requirement fails.
.Sp
ClickTest runs the requirement script before creating any other test files.
For example, contents of \fB\f(CB%file\fB\fR sections are not available.
.ie n .IP "\fB\fB%info\fB\fR" 8
.el .IP "\fB\f(CB%info\fB\fR" 8
.IX Item "%info"
A short description of the test. In \fB\-\-superverbose\fR mode, the first
paragraph of its contents is printed before the test results.
.ie n .IP "\fB\fB%cut\fB\fR" 8
.el .IP "\fB\f(CB%cut\fB\fR" 8
.IX Item "%cut"
This section is ignored. It is intended to comment out obsolete parts of
the test.
.ie n .IP "\fB\fB%file\fB [\-de] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.el .IP "\fB\f(CB%file\fB [\-de] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.IX Item "%file [-de] [+LENGTH] FILENAME..."
Create an input file for the script. \fI\s-1FILENAME\s0\fR can be \fBstdin\fR,
which sets the script's standard input. If \fB+\fR\fI\s-1LENGTH\s0\fR is provided,
the file data consists of the \fI\s-1LENGTH\s0\fR bytes following this line;
otherwise, it consists of the data up to the next section. The \fB\-d\fR
flag tells clicktest to delete the first character of each line in the
section. The \fB\-e\fR flag indicates that the section was \s-1MIME\s0
Base64\-encoded (see \fIbase64\fR\|(1)); it is decoded before use. To
include a file with lines that start with \fB%\fR (which would normally
start a new section), use \fB\-d\fR and preface each line of the file with
a space, or use \fB\-e\fR.
.ie n .IP "\fB\fB%expect\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.el .IP "\fB\f(CB%expect\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.IX Item "%expect [-adeiw] [+LENGTH] FILENAME..."
Define an expected output file. Differences between the script's
output \fI\s-1FILENAME\s0\fR and the contents of the \fB\f(CB%expect\fB\fR section will
cause the test to fail.
.Sp
\&\fI\s-1FILENAME\s0\fR can be \fBstdout\fR, for standard output. If \fB+\fR\fI\s-1LENGTH\s0\fR is
provided, the file data consists of the \fI\s-1LENGTH\s0\fR bytes following this
line; otherwise, it consists of the data up to the next section.
.Sp
After running the script, clicktest compares the \fI\s-1FILENAME\s0\fR generated by
the script with the provided data. The files are compared
line-by-line. ClickTest ignores blank lines, differences in trailing
whitespace, and lines in the script output that match \fB\f(CB%ignore\fB\fR
patterns (see below). The \fB\-w\fR flag causes clicktest to ignore
differences in amount of whitespace within each line.
.Sp
\&\fB\f(CB%expect\fB\fR lines can contain Perl regular expressions, enclosed by two
sets of braces. The \fB\f(CB%expect\fB\fR line
.Sp
.Vb 1
\&    foo{{(bar)?}}
.Ve
.Sp
matches either \f(CW\*(C`foo\*(C'\fR or \f(CW\*(C`foobar\*(C'\fR. The \fB\-i\fR flag makes all such
regular expressions case-insensitive. (Text outside of regular
expressions must match case.)
.Sp
Document an \fB\f(CB%expect\fB\fR line with \f(CW\*(C`{{?comment}}\*(C'\fR blocks. For example:
.Sp
.Vb 1
\&    foo                {{? the sort was in the right order}}
.Ve
.Sp
ClickTest ignores whitespace before and after the \f(CW\*(C`{{?comment}}\*(C'\fR block, and if
the actual output differs from this expected line, it prints the comment in
addition to the line differences.
.Sp
The \fB\-a\fR flag marks this expected output as an alternate. ClickTest will
compare the script's output file with each provided alternate; the
test succeeds if any of the alternates match. The \fB\-d\fR flag behaves
as in \fB\f(CB%file\fB\fR.
.ie n .IP "\fB\fB%expectv\fB [\-ade] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.el .IP "\fB\f(CB%expectv\fB [\-ade] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.IX Item "%expectv [-ade] [+LENGTH] FILENAME..."
Define a literal expected output file. This behaves like \fB\f(CB%expect\fB\fR,
except that the script's output file must match the provided data
\&\fIexactly\fR: \fB\f(CB%expectv\fB\fR never ignores whitespace differences, does not
treat \f(CW\*(C`{{}}\*(C'\fR blocks as regular expressions, and does not parse
\&\fB\f(CB%ignore\fB\fR patterns.
.ie n .IP "\fB\fB%expectx\fB [\-adiw] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.el .IP "\fB\f(CB%expectx\fB [\-adiw] [+\f(BI\s-1LENGTH\s0\fB] \f(BI\s-1FILENAME\s0\fB...\fR" 8
.IX Item "%expectx [-adiw] [+LENGTH] FILENAME..."
Define a regular-expression expected output file. This behaves like
\&\fB\f(CB%expect\fB\fR, except that every line is treated as a regular expression.
\&\f(CW\*(C`{{?comment}}\*(C'\fR blocks are ignored, but other brace pairs are treated
according to the normal regular expression rules.
.ie n .IP "\fB\fB%stdin\fB [\-de] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.el .IP "\fB\f(CB%stdin\fB [\-de] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.IX Item "%stdin [-de] [+LENGTH]"
Same as \fB\f(CB%file\fB stdin\fR.
.ie n .IP "\fB\fB%stdout\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.el .IP "\fB\f(CB%stdout\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.IX Item "%stdout [-adeiw] [+LENGTH]"
Same as \fB\f(CB%expect\fB stdout\fR.
.ie n .IP "\fB\fB%stderr\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.el .IP "\fB\f(CB%stderr\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB]\fR" 8
.IX Item "%stderr [-adeiw] [+LENGTH]"
Same as \fB\f(CB%expect\fB stderr\fR.
.ie n .IP "\fB\fB%ignorex\fB [\-di] [+\f(BI\s-1LENGTH\s0\fB] [\f(BI\s-1FILENAME\s0\fB]\fR" 8
.el .IP "\fB\f(CB%ignorex\fB [\-di] [+\f(BI\s-1LENGTH\s0\fB] [\f(BI\s-1FILENAME\s0\fB]\fR" 8
.IX Item "%ignorex [-di] [+LENGTH] [FILENAME]"
Each line in the \fB\f(CB%ignorex\fB\fR section is a Perl regular expression. Lines in
the supplied \fI\s-1FILENAME\s0\fR that match any of those regular expressions will not
be considered when comparing files with \fB\f(CB%expect\fB\fR data. The regular
expression must match the whole line. \fI\s-1FILENAME\s0\fR may be \fBall\fR, in which case
the regular expressions will apply to all \fB\f(CB%expect\fB\fR files. \f(CW\*(C`{{?comment}}\*(C'\fR
blocks are ignored.
.ie n .IP "\fB\fB%ignore\fB\fR, \fB\fB%ignorev\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB] [\f(BI\s-1FILENAME\s0\fB]\fR" 8
.el .IP "\fB\f(CB%ignore\fB\fR, \fB\f(CB%ignorev\fB [\-adeiw] [+\f(BI\s-1LENGTH\s0\fB] [\f(BI\s-1FILENAME\s0\fB]\fR" 8
.IX Item "%ignore, %ignorev [-adeiw] [+LENGTH] [FILENAME]"
Like \fB\f(CB%ignorex\fB\fR, but \fB\f(CB%ignore\fB\fR parses regular expressions only inside
double braces (\f(CW\*(C`{{ }}\*(C'\fR), and \fB\f(CB%ignorev\fB\fR lines must match exactly.
.ie n .IP "\fB\fB%include\fB \f(BI\s-1FILENAME\s0\fB\fR" 8
.el .IP "\fB\f(CB%include\fB \f(BI\s-1FILENAME\s0\fB\fR" 8
.IX Item "%include FILENAME"
Interpolate the contents of another clicktest file.
.ie n .IP "\fB\fB%eot\fB\fR" 8
.el .IP "\fB\f(CB%eot\fB\fR" 8
.IX Item "%eot"
Marks the end of the current test. The rest of the file will be parsed for
additional tests.
.ie n .IP "\fB\fB%eof\fB\fR" 8
.el .IP "\fB\f(CB%eof\fB\fR" 8
.IX Item "%eof"
The rest of the file is ignored.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This simple clicktest script checks that 'grep \-c' works for a simple output
file.
.PP
.Vb 7
\&  %script
\&  grep \-c B.
\&  %stdin
\&  Bfoo
\&  B
\&  %stdout
\&  1
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
By default, clicktest sets the \f(CW\*(C`LC_ALL\*(C'\fR environment variable to \*(L"C\*(R"; without
this setting commands like \fBsort\fR have unpredictable effects. To set
\&\f(CW\*(C`LC_ALL\*(C'\fR to another value, set it in the \fB\f(CB%script\fB\fR section.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eddie Kohler, <kohler@seas.harvard.edu>
